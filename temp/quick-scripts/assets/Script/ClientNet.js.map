{"version":3,"sources":["ClientNet.js"],"names":["ClientNet","cc","Class","properties","m_strServerIp","m_strIpPort","m_pWebSocket","init","initNet","svrIp","strPort","strWs","WebSocket","pSelf","onopen","evt","log","send","onclose","onmessage","MsgMgr","MsgRecvData","data","onerror","e","name","message","sendData","strData","CloseNet","close","module","exports"],"mappings":";;;;;;AAAA,IAAIA,YAAYC,GAAGC,KAAH,CAAS;;AAIrBC,gBAAY;AACTC,uBAAc,EADL;AAETC,qBAAY,EAFH;AAGTC,sBAAa;AAHJ,KAJS;;AAUrBC,UAAK,gBACL,CACC,CAZoB;;AAcrBC,aAAQ,iBAASC,KAAT,EAAeC,OAAf,EACR;AACI,YAAGD,SAAO,EAAP,IAAaA,SAAO,IAAvB,EACA;AACI,mBAAO,KAAP;AACH;AACD,YAAGC,WAAS,EAAT,IAAeA,WAAS,IAA3B,EACA;AACI,mBAAO,KAAP;AACH;AACD,aAAKN,aAAL,GAAqBK,KAArB;AACA,aAAKJ,WAAL,GAAmBK,OAAnB;AACA,YAAIC,QAAQ,UAAU,KAAKP,aAAf,GAA+B,GAA/B,GAAqC,KAAKC,WAAtD;AACA,YACA;AACI,iBAAKC,YAAL,GAAoB,IAAIM,SAAJ,CAAcD,KAAd,CAApB;AACA,gBAAIE,QAAQ,IAAZ;AACA,iBAAKP,YAAL,CAAkBQ,MAAlB,GAA2B,UAASC,GAAT,EAC3B;AACId,mBAAGe,GAAH,CAAO,wBAAP;AACAH,sBAAMP,YAAN,CAAmBW,IAAnB,CAAwB,gBAAxB;AACAJ,sBAAMP,YAAN,CAAmBW,IAAnB,CAAwB,gBAAxB;AACAJ,sBAAMP,YAAN,CAAmBW,IAAnB,CAAwB,gBAAxB;AACAJ,sBAAMP,YAAN,CAAmBW,IAAnB,CAAwB,gBAAxB;AACAJ,sBAAMP,YAAN,CAAmBW,IAAnB,CAAwB,gBAAxB;AAEH,aATD;;AAWA,iBAAKX,YAAL,CAAkBY,OAAlB,GAA4B,UAASH,GAAT,EAC5B;AACKd,mBAAGe,GAAH,CAAO,yBAAP;AAEJ,aAJD;;AAMA,iBAAKV,YAAL,CAAkBa,SAAlB,GAA8B,UAASJ,GAAT,EAC9B;AACId,mBAAGe,GAAH,CAAO,2BAAP;AACAf,mBAAGmB,MAAH,CAAUC,WAAV,CAAsBN,IAAIO,IAA1B;AAEH,aALD;;AAOA,iBAAKhB,YAAL,CAAkBiB,OAAlB,GAA4B,UAASR,GAAT,EAC5B;AACGd,mBAAGe,GAAH,CAAO,yBAAP;AACF,aAHD;AAKH,SAjCD,CAkCA,OAAMQ,CAAN,EACA;AACIvB,eAAGe,GAAH,CAAOQ,EAAEC,IAAF,GAAS,YAAT,GAAwBD,EAAEE,OAAjC;AACH;AAGJ,KAnEoB;;AAqErBC,cAAS,kBAASC,OAAT,EACT;AACI,YAAG,KAAKtB,YAAL,IAAqB,IAAxB,EACA;AACI,iBAAKA,YAAL,CAAkBW,IAAlB,CAAuBW,OAAvB;AACH;AACJ,KA3EoB;;AA8ErBC,cAAS,oBACT;AACI,YAAG,KAAKvB,YAAL,IAAqB,IAAxB,EACA;AACI,iBAAKA,YAAL,CAAkBwB,KAAlB;AACH;AACJ;;AAID;AACA;;AAEA;AA3FqB,CAAT,CAAhB;;AA8FAC,OAAOC,OAAP,GAAiB,EAAChC,oBAAD,EAAjB","file":"ClientNet.js","sourceRoot":"..\\..\\..\\..\\assets\\Script","sourcesContent":["var ClientNet = cc.Class({\r\n\r\n    \r\n\r\n    properties: {\r\n       m_strServerIp:\"\",\r\n       m_strIpPort:\"\",\r\n       m_pWebSocket:null,\r\n    },\r\n\r\n    init:function()\r\n    {\r\n    },         \r\n\r\n    initNet:function(svrIp,strPort)\r\n    {\r\n        if(svrIp==\"\" || svrIp==null)\r\n        {\r\n            return false;\r\n        }\r\n        if(strPort==\"\" || strPort==null)\r\n        {\r\n            return false;\r\n        }\r\n        this.m_strServerIp = svrIp;\r\n        this.m_strIpPort = strPort;  \r\n        var strWs = \"ws://\" + this.m_strServerIp + \":\" + this.m_strIpPort;\r\n        try\r\n        {\r\n            this.m_pWebSocket = new WebSocket(strWs);\r\n            var pSelf = this;\r\n            this.m_pWebSocket.onopen = function(evt)\r\n            {\r\n                cc.log(\"m_pWebSocket    onopen\");\r\n                pSelf.m_pWebSocket.send(\"my clinet go01\");\r\n                pSelf.m_pWebSocket.send(\"my clinet go02\");\r\n                pSelf.m_pWebSocket.send(\"my clinet go03\");\r\n                pSelf.m_pWebSocket.send(\"my clinet go04\");\r\n                pSelf.m_pWebSocket.send(\"my clinet go05\");\r\n               \r\n            };\r\n                \r\n            this.m_pWebSocket.onclose = function(evt)\r\n            {\r\n                 cc.log(\"m_pWebSocket    onclose\");\r\n                \r\n            };\r\n            \r\n            this.m_pWebSocket.onmessage = function(evt)\r\n            {\r\n                cc.log(\"m_pWebSocket    onmessage\");\r\n                cc.MsgMgr.MsgRecvData(evt.data);\r\n                 \r\n            };\r\n            \r\n            this.m_pWebSocket.onerror = function(evt)\r\n            {\r\n               cc.log(\"m_pWebSocket    onerror\");\r\n            };        \r\n\r\n        }\r\n        catch(e)\r\n        {            \r\n            cc.log(e.name + \" NetError:\" + e.message);\r\n        };\r\n\r\n      \r\n    },\r\n\r\n    sendData:function(strData)\r\n    {\r\n        if(this.m_pWebSocket != null)\r\n        {\r\n            this.m_pWebSocket.send(strData);\r\n        }\r\n    },\r\n\r\n\r\n    CloseNet:function()\r\n    {\r\n        if(this.m_pWebSocket != null)\r\n        {\r\n            this.m_pWebSocket.close();\r\n        }\r\n    },\r\n\r\n   \r\n\r\n    // called every frame, uncomment this function to activate update callback\r\n    // update: function (dt) {\r\n\r\n    // },\r\n});\r\n\r\nmodule.exports = {ClientNet};\r\n"]}